name: Test Cars CI

on:
  push:
    branches:
      - main  # Запускаем на пуш в main
  pull_request:
    branches:
      - main  # Запускаем на PR в main
  workflow_dispatch:  # Позволяет вручную запускать пайплайн

jobs:
  # Джоба для сборки образа
  build_image:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: docker build -t test-cars .

  # Джоба для запуска API тестов
  TestApi:
    runs-on: ubuntu-latest
    needs: build_image  # Зависит от job'ы build_image

    steps:
    - name: Check out the code
      uses: actions/checkout@v2

    - name: Run API tests
      run: |
        docker run --name test-cars-api test-cars bash -c "pytest -s -v tests/test_app.py > tests/results/api_results.txt"
      
    - name: Upload API test results
      uses: actions/upload-artifact@v2
      with:
        name: api-results
        path: tests/results/api_results.txt


  TestUi:
    runs-on: ubuntu-latest
    needs: test_api  # Зависит от успешного завершения test_api

    steps:
    - name: Check out the code
      uses: actions/checkout@v2

    - name: Run UI tests
      run: |
        docker run --name test-cars-ui test-cars bash -c "pytest -s -v tests/test_ui.py > tests/results/ui_results.txt"

    - name: Upload UI test results
      uses: actions/upload-artifact@v2
      with:
        name: ui-results
        path: tests/results/ui_results.txt
